version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: hubpkt-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-hubpkt}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  migration:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: hubpkt-migration-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
    command: npx prisma migrate deploy
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  # ADD THIS: Init container to set up permissions
  uploads-init:
    image: alpine:latest
    container_name: hubpkt-uploads-init-prod
    volumes:
      - uploads-data:/uploads
    command: >
      sh -c "
        echo 'Setting up uploads directory permissions...' &&
        mkdir -p /uploads/categories /uploads/images /uploads/assets &&
        chown -R 1000:1000 /uploads &&
        chmod -R 755 /uploads &&
        echo 'Uploads directory ready with proper permissions!'
      "
    restart: "no"

  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: hubpkt-server-prod
    restart: unless-stopped
    # IMPORTANT: Run as specific user to match permissions
    user: "1000:1000"
    ports:
      - "127.0.0.1:4001:4001"
    environment:
      - NODE_ENV=production
      - ENV_TYPE=prod
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - REGISTRATION_CODE=${REGISTRATION_CODE}  # Add this line
      - STORAGE_BASE_PATH=/app/uploads
      - NGINX_BASE_URL=https://www.peekcode.dev
      - MAX_FILE_SIZE=5242880
      - ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp,image/svg+xml
      - CLIENT_ORIGIN=https://www.peekcode.dev
    volumes:
      - uploads-data:/app/uploads
    depends_on:
      uploads-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: hubpkt-nginx-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:80"
    volumes:
      - uploads-data:/usr/share/nginx/html
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      uploads-init:
        condition: service_completed_successfully
      server:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_API_KEY=${API_KEY}
        - VITE_ENV_TYPE=prod
        - VITE_JOTFORM_API_KEY=${VITE_JOTFORM_API_KEY}
        - VITE_JOTFORM_FORM_ID=${VITE_JOTFORM_FORM_ID}
        - VITE_JOTFORM_FORM_CREATORS_ID=${VITE_JOTFORM_FORM_CREATORS_ID}
        - VITE_TRACKING_ID_GA=${VITE_TRACKING_ID_GA}
    container_name: hubpkt-client-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:80"
    depends_on:
      - server
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  uploads-data: